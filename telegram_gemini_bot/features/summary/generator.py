# C:\Users\gta4r\PycharmProjects\TelegramBot\telegram_gemini_bot\features\summary\generator.py
from typing import List, Dict, Optional
from datetime import datetime, timezone
import logging
from dataclasses import dataclass

from .analyzer import ChatAnalyzer, ChatAnalysis
from ...core.gemini_client import GeminiClient, GeminiResponse


@dataclass
class SummaryOptions:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏"""
    include_user_patterns: bool = True
    include_topics: bool = True
    include_activity: bool = True
    include_interactions: bool = True
    max_length: Optional[int] = None
    style: Optional[str] = None


class SummaryGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–≤–æ–¥–æ–∫ —á–∞—Ç–∞"""

    def __init__(
            self,
            gemini_client: GeminiClient,
            analyzer: Optional[ChatAnalyzer] = None,
            logger: Optional[logging.Logger] = None
    ):
        self.gemini = gemini_client
        self.analyzer = analyzer or ChatAnalyzer()
        self.logger = logger or logging.getLogger(__name__)

    async def generate_summary(
            self,
            messages: List[Dict],
            options: Optional[SummaryOptions] = None
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ —á–∞—Ç–∞

        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            options: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

        Returns:
            str: –¢–µ–∫—Å—Ç —Å–≤–æ–¥–∫–∏
        """
        if not messages:
            return "üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"

        options = options or SummaryOptions()

        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            analysis = self.analyzer.analyze_messages(messages)

            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            description = self.analyzer.get_activity_description(analysis)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É —Å –ø–æ–º–æ—â—å—é Gemini
            prompt = self._build_summary_prompt(
                description=description,
                analysis=analysis,
                options=options
            )

            response = await self.gemini.generate_text(prompt)

            if response.success and response.text:
                self.logger.debug(f"Generated response: {response.text}")
                return response.text
            else:
                self.logger.error(f"Failed to generate summary: {response.error}")
                return description

        except Exception as e:
            self.logger.error(f"Error generating summary: {e}")
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏"

    def _build_summary_prompt(
            self,
            description: str,
            analysis: ChatAnalysis,
            options: SummaryOptions
    ) -> str:
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏

        Args:
            description: –ë–∞–∑–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
            options: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        prompt_parts = [
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å–æ–∑–¥–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é —Å–≤–æ–¥–∫—É.",
            "–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:",
            description
        ]

        if options.include_user_patterns:
            patterns = self.analyzer.get_user_patterns(analysis.active_users)
            prompt_parts.extend([
                "\n–ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
                *[f"- {user}: {pattern}" for user, pattern in patterns.items()]
            ])

        prompt_parts.extend([
            "\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–≤–æ–¥–∫–µ:",
            "1. –°–¥–µ–ª–∞–π –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ–º–∞—Ö –∏ –¥–∏–Ω–∞–º–∏–∫–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è",
            "2. –û–ø–∏—à–∏ —Ä–æ–ª—å –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞",
            "3. –í—ã–¥–µ–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è",
            "4. –ü–æ–¥–≤–µ–¥–∏ –∏—Ç–æ–≥ –≤ —Å—Ç–∏–ª–µ '–∏—Ç–æ–≥–æ –∑–∞ –ø–µ—Ä–∏–æ–¥...'"
        ])

        if options.style:
            prompt_parts.append(f"\n–°—Ç–∏–ª—å –∏–∑–ª–æ–∂–µ–Ω–∏—è: {options.style}")

        if options.max_length:
            prompt_parts.append(f"\n–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã: {options.max_length} —Å–∏–º–≤–æ–ª–æ–≤")

        return "\n".join(prompt_parts)

    async def generate_daily_summary(
            self,
            messages: List[Dict],
            style: Optional[str] = None
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –∑–∞ –¥–µ–Ω—å

        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            style: –°—Ç–∏–ª—å –∏–∑–ª–æ–∂–µ–Ω–∏—è

        Returns:
            str: –¢–µ–∫—Å—Ç —Å–≤–æ–¥–∫–∏
        """
        options = SummaryOptions(
            include_user_patterns=True,
            include_topics=True,
            include_activity=True,
            include_interactions=True,
            style=style or "–°–≤–æ–¥–∫–∞ –≤ —Å—Ç–∏–ª–µ –¥–≤–∞—á–µ—Ä–∞ —Å —é–º–æ—Ä–æ–º –∏ –æ—Ç—Å—ã–ª–∫–∞–º–∏ –∫ –º–µ–º–∞–º"
        )

        return await self.generate_summary(messages, options)

    async def generate_period_summary(
            self,
            messages: List[Dict],
            hours: float,
            style: Optional[str] = None
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥

        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            hours: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
            style: –°—Ç–∏–ª—å –∏–∑–ª–æ–∂–µ–Ω–∏—è

        Returns:
            str: –¢–µ–∫—Å—Ç —Å–≤–æ–¥–∫–∏
        """
        options = SummaryOptions(
            include_user_patterns=True,
            include_topics=True,
            include_activity=True,
            include_interactions=True,
            style=style or f"–°–≤–æ–¥–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤ –≤ —Å—Ç–∏–ª–µ –¥–≤–∞—á–µ—Ä–∞"
        )

        return await self.generate_summary(messages, options)

    async def generate_date_summary(
            self,
            messages: List[Dict],
            target_date: datetime,
            style: Optional[str] = None
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É

        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            target_date: –î–∞—Ç–∞
            style: –°—Ç–∏–ª—å –∏–∑–ª–æ–∂–µ–Ω–∏—è

        Returns:
            str: –¢–µ–∫—Å—Ç —Å–≤–æ–¥–∫–∏
        """
        options = SummaryOptions(
            include_user_patterns=True,
            include_topics=True,
            include_activity=True,
            include_interactions=True,
            style=style or f"–°–≤–æ–¥–∫–∞ –∑–∞ {target_date.strftime('%Y-%m-%d')} –≤ —Å—Ç–∏–ª–µ –¥–≤–∞—á–µ—Ä–∞"
        )

        return await self.generate_summary(messages, options)