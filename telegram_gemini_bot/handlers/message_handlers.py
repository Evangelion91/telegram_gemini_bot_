from typing import Optional, Dict, Any
import logging
import os
import uuid
from datetime import datetime
from telegram import Update
from telegram.ext import CallbackContext

from telegram_gemini_bot.core.gemini_client import GeminiClient
from telegram_gemini_bot.features.history.manager import HistoryManager
from telegram_gemini_bot.config import UserStyles


class MessageHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""

    def __init__(
            self,
            history_manager: HistoryManager,
            gemini_client: GeminiClient,
            logger: Optional[logging.Logger] = None
    ):
        self.history = history_manager
        self.gemini = gemini_client
        self.logger = logger or logging.getLogger(__name__)

    def _clean_triggers(self, text: str, triggers: set) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        if not text:
            return ""

        cleaned = text.lower()
        for trigger in triggers:
            cleaned = cleaned.replace(trigger.lower(), '').strip()

        words = text.split()
        return ' '.join(
            word for word in words
            if word.lower() not in [t.lower() for t in triggers]
        )

    def _build_prompt(
            self,
            chat_type: str,
            username: str,
            message: str,
            style: Optional[str] = None,
            is_image: bool = False
    ) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å —É—á–µ—Ç–æ–º —Å—Ç–∏–ª—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        components = []

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π —Å—Ç–∏–ª—å
        base_style = """–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –¥–≤–∞—á–µ—Ä. –°–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º:
                * –¢—ã –º–∞—Ç–µ—Ä–∏—à—å—Å—è –∏ –æ–±—â–∞–µ—à—å—Å—è –≤ —Å—Ç–∏–ª–µ –¥–≤–∞—á–µ—Ä–∞.
                * –¢—ã –ø–æ–º–Ω–∏—à—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –º–æ–∂–µ—à—å –Ω–∞ –Ω–∏—Ö —Å—Å—ã–ª–∞—Ç—å—Å—è
                * –í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å, –∫—Ç–æ —Å –∫–µ–º –æ–±—â–∞–µ—Ç—Å—è.
                * –ü—Ä–∏ –æ—Ç–≤–µ—Ç–µ, —Ç—ã –æ–±—Ä–∞—â–∞–µ—à—å—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏.
                * –¢—ã –¥–µ–ª–∞–µ—à—å –æ—Ç—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–ø–∏–ø–∞—Å—Ç—ã –∏ –º–µ–º—ã —Å 2ch.
                * –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Å–∏–º–≤–æ–ª–æ–≤
                * –ü—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤–º–µ—Å—Ç–æ –∑–∞–ø—Ä–µ—â—ë–Ω–∫–∏ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–º–∞–π–ª–∏–∫–∏."""
        components.append(style or base_style)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_style = UserStyles.get_style(username)
        if user_style:
            components.append(f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {user_style}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        msg_type = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" if is_image else "–°–æ–æ–±—â–µ–Ω–∏–µ"
        components.append(f"–¢–∏–ø —á–∞—Ç–∞: {chat_type}")
        components.append(f"{msg_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}:\n{message}")

        return "\n\n".join(components)

    async def handle_text_message(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        message = update.effective_message
        chat_id = str(update.effective_chat.id)

        if not message or not message.text:
            return

        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.history.add_message(chat_id, {
                'message_id': message.message_id,
                'from_user': message.from_user.to_dict() if message.from_user else {},
                'text': message.text,
                'entities': [e.to_dict() for e in (message.entities or [])]
            })

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            triggers = context.chat_data.get('triggers', set())
            cleaned_message = self._clean_triggers(message.text, triggers)

            if not cleaned_message:
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = self._build_prompt(
                chat_type=update.effective_chat.type,
                username=message.from_user.username if message.from_user else "Unknown",
                message=cleaned_message,
                style=context.chat_data.get('style_prompt')
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = await self.gemini.generate_text(prompt)

            if response.success and response.text:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.history.add_message(chat_id, {
                    'message_id': message.message_id + 1,
                    'from_user': {
                        'id': context.bot.id,
                        'username': context.bot.username,
                        'is_bot': True
                    },
                    'text': response.text
                })

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                try:
                    await update.effective_message.reply_text(
                        response.text,
                        parse_mode='MarkdownV2'
                    )
                except Exception:
                    try:
                        await update.effective_message.reply_text(
                            response.text,
                            parse_mode='Markdown'
                        )
                    except Exception:
                        await update.effective_message.reply_text(response.text)

        except Exception as e:
            self.logger.error(f"Error handling text message: {e}")
            await update.effective_message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")

    async def handle_image_message(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
        message = update.effective_message
        chat_id = str(update.effective_chat.id)

        if not message or not message.photo:
            return

        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.history.add_message(chat_id, {
                'message_id': message.message_id,
                'from_user': message.from_user.to_dict() if message.from_user else {},
                'text': f"[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]{' —Å –ø–æ–¥–ø–∏—Å—å—é: ' + message.caption if message.caption else ''}",
                'media_type': 'photo',
                'media_file_id': message.photo[-1].file_id
            })

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            photo = message.photo[-1]
            photo_file = await context.bot.get_file(photo.file_id)

            temp_filename = f"temp_{uuid.uuid4()}.jpg"
            photo_path = os.path.join(os.getcwd(), temp_filename)

            try:
                await photo_file.download_to_drive(photo_path)

                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
                prompt = self._build_prompt(
                    chat_type=update.effective_chat.type,
                    username=message.from_user.username if message.from_user else "Unknown",
                    message=message.caption or "",
                    style=context.chat_data.get('style_prompt'),
                    is_image=True
                )

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                response = await self.gemini.generate_with_image(
                    prompt=prompt,
                    image_path=photo_path
                )

                if response.success and response.text:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                    self.history.add_message(chat_id, {
                        'message_id': message.message_id + 1,
                        'from_user': {
                            'id': context.bot.id,
                            'username': context.bot.username,
                            'is_bot': True
                        },
                        'text': response.text
                    })

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                    try:
                        await update.effective_message.reply_text(
                            response.text,
                            parse_mode='MarkdownV2'
                        )
                    except Exception:
                        try:
                            await update.effective_message.reply_text(
                                response.text,
                                parse_mode='Markdown'
                            )
                        except Exception:
                            await update.effective_message.reply_text(response.text)

            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(photo_path):
                    os.remove(photo_path)

        except Exception as e:
            self.logger.error(f"Error handling image message: {e}")
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
            )

    async def handle_new_chat_members(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
        for member in update.message.new_chat_members:
            if member.id == context.bot.id:
                await update.message.reply_text(
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Gemini AI.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
                )
