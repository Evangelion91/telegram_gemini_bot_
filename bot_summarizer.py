import logging
import json
from datetime import timezone
import sys
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import os

import colorlog
import ijson as ijson
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackContext
import asyncio
import nest_asyncio
from google.generativeai import configure, GenerativeModel, upload_file
from google.generativeai.types import HarmCategory, HarmBlockThreshold
from google.generativeai.types import GenerationConfig as GenConfig
import httpx
from typing import Optional, Dict, Any

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –æ—Ç httpx
httpx.Timeout._DEFAULT_TIMEOUT = httpx.Timeout(10.0)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("httpcore").setLevel(logging.WARNING)
logging.getLogger("apscheduler").setLevel(logging.WARNING)
logging.getLogger("telegram.ext").setLevel(logging.WARNING)

TELEGRAM_TOKEN = "7723177393:AAF84TwXhQfe-jUJbfYYn2rhcmHZUZsfRtM"
GEMINI_API_KEY = 'AIzaSyBd_dYuzcPzvrvZ-aohhKpk7uSiNCcY14s'


def create_color_formatter():
    return colorlog.ColoredFormatter(
        "%(log_color)s[%(asctime)s] %(name_without_underscores)-12s %(levelname)-8s %(message)s%(reset)s",
        datefmt="%Y-%m-%d %H:%M:%S",
        log_colors={
            'DEBUG': 'cyan',
            'INFO': 'green',
            'WARNING': 'yellow',
            'ERROR': 'red',
            'CRITICAL': 'bold_red',
        }
    )


class NameFilter(logging.Filter):
    def filter(self, record):
        record.name_without_underscores = record.name.replace('__', '')
        return True


class ChatHistoryManager:
    def __init__(self, chat_id: str = "1431279163", storage_file: str = "chat_history.json"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞

        Args:
            chat_id: ID —á–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∞—à —á–∞—Ç)
            storage_file: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        """
        self.chat_id = chat_id
        self.storage_file = storage_file
        self.logger = logging.getLogger('chat_history')
        self.logger.setLevel(logging.DEBUG)

        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Telegram export
        self.chat_history = {
            'name': "üíãHello, —à–∏–∑–∞",  # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —á–∞—Ç–∞
            'type': "private_supergroup",
            'id': int(chat_id),
            'messages': []
        }

        self.load_history()

    def load_history(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.storage_file):
                with open(self.storage_file, 'r', encoding='utf-8') as f:
                    self.chat_history = json.load(f)
                self.logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.chat_history['messages'])} —Å–æ–æ–±—â–µ–Ω–∏–π")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

    def save_history(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.storage_file, 'w', encoding='utf-8') as f:
                json.dump(self.chat_history, f, ensure_ascii=False, indent=2)
            self.logger.debug("–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

    def import_telegram_export(self, export_data: Dict):
        """–ò–º–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ —ç–∫—Å–ø–æ—Ä—Ç–∞ Telegram"""
        if 'messages' not in export_data:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞")

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
        self.chat_history['name'] = export_data.get('name', self.chat_history['name'])
        self.chat_history['type'] = export_data.get('type', self.chat_history['type'])

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        existing_ids = {msg['id'] for msg in self.chat_history['messages']}
        new_messages = [msg for msg in export_data['messages'] if msg['id'] not in existing_ids]

        self.chat_history['messages'].extend(new_messages)
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ
        self.chat_history['messages'].sort(key=lambda x: x['date'])

        self.save_history()
        self.logger.info(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(new_messages)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

    def get_messages_for_date(self, start_date: datetime, end_date: datetime) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        """
        from datetime import timezone

        self.logger.info(f"Searching messages from {start_date.isoformat()} to {end_date.isoformat()}")
        messages = []
        export_count = 0

        # –ß–∏—Ç–∞–µ–º –∏–∑ —ç–∫—Å–ø–æ—Ä—Ç–∞
        if os.path.exists("chat_export.json"):
            try:
                with open("chat_export.json", 'rb') as f:
                    self.logger.info("Reading export...")
                    parser = ijson.items(f, 'messages.item')

                    for msg in parser:
                        try:
                            msg_time = datetime.fromtimestamp(int(msg['date_unixtime']), tz=timezone.utc)
                            if start_date <= msg_time < end_date:
                                messages.append(msg)
                                export_count += 1
                                if export_count % 10000 == 0:
                                    self.logger.info(f"Read {export_count} messages from export")
                        except (KeyError, ValueError) as e:
                            self.logger.error(f"Error processing message from export: {e}")
                            continue

                self.logger.info(f"Export read complete. Found {export_count} messages in export")

            except Exception as e:
                self.logger.error(f"Error reading export: {e}")

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—É—â–µ–π –∏—Å—Ç–æ—Ä–∏–∏
        current_messages = []
        for msg in self.chat_history['messages']:
            try:
                msg_time = datetime.fromtimestamp(int(msg['date_unixtime']), tz=timezone.utc)
                if start_date <= msg_time < end_date:
                    current_messages.append(msg)
            except (KeyError, ValueError) as e:
                self.logger.error(f"Error processing current message: {e}")
                continue

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        messages.extend(current_messages)
        try:
            messages.sort(key=lambda x: int(x['date_unixtime']))
        except Exception as e:
            self.logger.error(f"Error sorting messages: {e}")

        self.logger.info(
            f"Total messages: {len(messages)}\n"
            f"- From export: {export_count}\n"
            f"- Current: {len(current_messages)}"
        )

        return messages

    def get_messages_in_timeframe(self, hours: Optional[float] = None) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑—Ä—ã–≤–∞ –º–µ–∂–¥—É —ç–∫—Å–ø–æ—Ä—Ç–æ–º –∏ —Ç–µ–∫—É—â–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        """
        from datetime import timezone

        now = datetime.utcnow().replace(tzinfo=timezone.utc)
        if hours is not None:
            cutoff_time = now - timedelta(hours=hours)
        else:
            cutoff_time = now.replace(hour=0, minute=0, second=0, microsecond=0)

        self.logger.info(f"Searching messages since {cutoff_time.isoformat()} UTC")
        messages = []
        export_count = 0
        last_export_time = None

        # –ß–∏—Ç–∞–µ–º –∏–∑ —ç–∫—Å–ø–æ—Ä—Ç–∞
        if os.path.exists("chat_export.json"):
            try:
                with open("chat_export.json", 'rb') as f:
                    self.logger.info("Reading export...")
                    parser = ijson.items(f, 'messages.item')

                    for msg in parser:
                        try:
                            msg_time = datetime.fromtimestamp(int(msg['date_unixtime']), tz=timezone.utc)
                            if last_export_time is None or msg_time > last_export_time:
                                last_export_time = msg_time

                            if msg_time >= cutoff_time:
                                messages.append(msg)
                                export_count += 1
                                if export_count % 10000 == 0:
                                    self.logger.info(f"Read {export_count} messages from export")
                        except (KeyError, ValueError) as e:
                            self.logger.error(f"Error processing message from export: {e}")
                            continue

                self.logger.info(f"Export read complete. Found {export_count} messages up to {last_export_time}")

            except Exception as e:
                self.logger.error(f"Error reading export: {e}")

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—É—â–µ–π –∏—Å—Ç–æ—Ä–∏–∏
        current_messages = []
        for msg in self.chat_history['messages']:
            try:
                msg_time = datetime.fromtimestamp(int(msg['date_unixtime']), tz=timezone.utc)
                self.logger.debug(f"Message time: {msg_time}, cutoff_time: {cutoff_time}")
                if msg_time >= cutoff_time and (not last_export_time or msg_time > last_export_time):
                    current_messages.append(msg)
            except (KeyError, ValueError) as e:
                self.logger.error(f"Error processing current message: {e}")
                continue

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        messages.extend(current_messages)
        try:
            messages.sort(key=lambda x: int(x['date_unixtime']))
        except Exception as e:
            self.logger.error(f"Error sorting messages: {e}")

        self.logger.info(
            f"Total messages: {len(messages)}\n"
            f"- From export: {export_count} (up to {last_export_time})\n"
            f"- Current: {len(current_messages)}"
        )

        return messages

    def add_message(self, message_data: Dict):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        Args:
            message_data: –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        try:
            # –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ Telegram export
            new_message = {
                'id': message_data.get('message_id', len(self.chat_history['messages']) + 1),
                'type': 'message',
                'date': datetime.utcnow().replace(tzinfo=timezone.utc).isoformat(),
                'date_unixtime': str(int(datetime.utcnow().replace(tzinfo=timezone.utc).timestamp())),
                'from': message_data.get('from_user', {}).get('username', 'Unknown'),
                'from_id': f"user{message_data.get('from_user', {}).get('id', 0)}",
                'text': message_data.get('text', '')
            }

            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –º–µ–¥–∏–∞
            if 'entities' in message_data:
                text_entities = []
                current_pos = 0
                text = message_data['text']

                for entity in message_data['entities']:
                    if current_pos < entity.offset:
                        text_entities.append({
                            'type': 'plain',
                            'text': text[current_pos:entity.offset]
                        })
                    text_entities.append({
                        'type': entity.type,
                        'text': text[entity.offset:entity.offset + entity.length]
                    })
                    current_pos = entity.offset + entity.length

                if current_pos < len(text):
                    text_entities.append({
                        'type': 'plain',
                        'text': text[current_pos:]
                    })
                new_message['text_entities'] = text_entities

            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞
            if 'photo' in message_data:
                new_message['photo'] = {'file_id': message_data['photo'][-1].get('file_id')}
            elif 'document' in message_data:
                new_message['document'] = {'file_id': message_data['document'].get('file_id')}

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.chat_history['messages'].append(new_message)
            self.save_history()
            self.logger.debug(f"Message {new_message['id']} saved successfully")

        except Exception as e:
            self.logger.error(f"Error adding message: {e}")

    async def create_summary(self, messages: List[Dict], gemini_tester: Any) -> str:
        """Create a summary using Gemini."""
        if not messages:
            return "üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."

        context = []

        # Basic statistics
        start_time = min(
            datetime.fromtimestamp(int(msg['date_unixtime']), tz=timezone.utc)
            for msg in messages
        )
        end_time = max(
            datetime.fromtimestamp(int(msg['date_unixtime']), tz=timezone.utc)
            for msg in messages
        )
        unique_users = len({msg.get('from', 'Unknown') for msg in messages})

        context.extend([
            f"–ê–Ω–∞–ª–∏–∑ —á–∞—Ç–∞ {self.chat_history['name']} –∑–∞ –ø–µ—Ä–∏–æ–¥:",
            f"–° {start_time.strftime('%H:%M')} –¥–æ {end_time.strftime('%H:%M')}",
            f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}",
            f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {unique_users}",
            "\n–°–æ–æ–±—â–µ–Ω–∏—è:"
        ])

        # Format messages
        for msg in messages:
            time = datetime.fromtimestamp(int(msg['date_unixtime']), tz=timezone.utc).strftime('%H:%M')

            # Get the sender's name, defaulting to 'Unknown' if missing
            sender = msg.get('from', 'Unknown')

            # Process text
            text = msg.get('text', '')
            if isinstance(text, list):
                text = ''.join(item['text'] if isinstance(item, dict) else str(item) for item in text)

            formatted_msg = f"[{time}] {sender}: {text}"
            context.append(formatted_msg)

        # Create the prompt for Gemini
        prompt = """
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å–æ–∑–¥–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é —Å–≤–æ–¥–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—ã –¥–∞–ª–∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —á—Ç–æ
        –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ –≤ —Ç–æ—Ç –¥–µ–Ω—å.

        –ù—É–∂–Ω–æ:
        1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è
        2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ –∏—Å—Ç–æ—Ä–∏—é –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ
        3. –£–ø–æ–º—è–Ω—É—Ç—å –æ—Å–æ–±–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–∑ —á–∞—Ç–∞
        4. –°–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥ –≤ —Å—Ç–∏–ª–µ "–∏—Ç–æ–≥–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è..."
        5. –ù–µ –∑–∞–±—É–¥—å —É–ø–æ–º—è–Ω—É—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        
        –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:
        """ + "\n".join(context)

        # Send to Gemini
        response = await gemini_tester.generate_text_content(prompt)
        return response['text'] if response['success'] else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–∫—É."


class GeminiTester:
    def __init__(self, api_key: str):
        formatter = colorlog.ColoredFormatter(
            "%(log_color)s[%(asctime)s] %(name_without_underscores)-12s %(levelname)-8s\n%(message)s%(reset)s\n",
            datefmt="%Y-%m-%d %H:%M:%S",
            log_colors={
                'DEBUG': 'cyan',
                'INFO': 'green',
                'WARNING': 'yellow',
                'ERROR': 'red',
                'CRITICAL': 'bold_red',
            }
        )

        self.logger = logging.getLogger('gemini_tester')
        handler = logging.StreamHandler()
        handler.setFormatter(formatter)
        handler.addFilter(NameFilter())
        self.logger.addHandler(handler)
        self.logger.setLevel(logging.INFO)
        self.logger.propagate = False

        configure(api_key=api_key)
        self.system_instructions = ""
        self.model = self._initialize_model()

    def _initialize_model(self) -> GenerativeModel:
        base_config = GenConfig(
            candidate_count=1,
            max_output_tokens=5000,
            temperature=1.0,
            top_p=1.0,
            top_k=40
        )

        self.logger.info(f"Initializing model with config: {base_config}")

        return GenerativeModel(
            model_name="gemini-1.5-flash-002",
            generation_config=base_config,
            # system_instruction=self.system_instructions
        )

    async def generate_text_content(
            self,
            prompt: str,
            generation_config: Optional[GenConfig] = None,
            max_retries: int = 3
    ) -> Dict[str, Any]:
        self.logger.info(f"Generating text content for prompt: {prompt}")

        if generation_config:
            self.logger.debug(f"Using custom generation config: {generation_config}")

        for attempt in range(max_retries):
            try:
                response = await asyncio.get_event_loop().run_in_executor(
                    None,
                    lambda: self.model.generate_content(
                        prompt,
                        generation_config=generation_config,
                        safety_settings=self._get_safety_settings()
                    )
                )

                return {
                    'success': True,
                    'text': response.text,
                    'response_object': response
                }

            except Exception as e:
                self.logger.error(f"Attempt {attempt + 1}/{max_retries} failed: {str(e)}")
                if attempt == max_retries - 1:
                    return {
                        'success': False,
                        'error': str(e)
                    }
                await asyncio.sleep(2 ** attempt)

    def _get_safety_settings(self) -> Dict[HarmCategory, HarmBlockThreshold]:
        return {
            HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE,
        }

    async def generate_image_content_stream(
            self,
            prompt: str,
            image_path: str,
            generation_config: Optional[GenConfig] = None,
            max_retries: int = 3
    ) -> Dict[str, Any]:
        try:
            base_config = GenConfig(
                candidate_count=1,
                max_output_tokens=1500,
                temperature=1.0,
                top_p=1.0,
                top_k=40
            )

            if not os.path.exists(image_path):
                return {
                    'success': False,
                    'error': 'Image file not found'
                }

            try:
                with open(image_path, 'rb') as f:
                    image_data = f.read()
                uploaded_file = upload_file(image_path)
            except Exception as e:
                self.logger.error(f"Error reading image file: {e}")
                return {
                    'success': False,
                    'error': f"Error reading image file: {str(e)}"
                }

            content = [prompt, uploaded_file]

            request_params = {
                'prompt': prompt,
                'generation_config': base_config.__dict__ if base_config else None,
                'safety_settings': self._get_safety_settings(),
                'max_retries': max_retries
            }

            for attempt in range(max_retries):
                try:
                    self.logger.info(f"Attempt {attempt + 1}/{max_retries}")

                    response = await asyncio.wait_for(
                        asyncio.get_event_loop().run_in_executor(
                            None,
                            lambda: self.model.generate_content(
                                content,
                                stream=True,
                                generation_config=base_config,
                                safety_settings=self._get_safety_settings()
                            )
                        ),
                        timeout=30.0
                    )

                    accumulated_text = []
                    finish_reason = None
                    block_reason = None
                    last_error = None

                    try:
                        async def process_stream():
                            for chunk in response:
                                if chunk.text:
                                    accumulated_text.append(chunk.text)
                                    self.logger.debug(f"Captured chunk: {chunk.text}")

                                if chunk.prompt_feedback and chunk.prompt_feedback.block_reason:
                                    nonlocal block_reason
                                    block_reason = chunk.prompt_feedback.block_reason
                                    self.logger.warning(f"Block detected: {block_reason}")

                                if chunk.candidates and chunk.candidates[0].finish_reason:
                                    nonlocal finish_reason
                                    finish_reason = chunk.candidates[0].finish_reason
                                    self.logger.warning(f"Finish reason: {finish_reason}")

                        await asyncio.wait_for(process_stream(), timeout=30.0)

                    except asyncio.TimeoutError:
                        self.logger.error("Stream processing timeout")
                        last_error = "Stream processing timeout"
                    except Exception as e:
                        last_error = e
                        self.logger.error(f"Stream processing error: {str(e)}")

                    full_text = ''.join(accumulated_text)

                    result = {
                        'success': True if full_text else False,
                        'text': full_text,
                        'response_object': response,
                        'request_params': request_params,
                        'metadata': {
                            'finish_reason': finish_reason,
                            'block_reason': block_reason,
                            'was_blocked': bool(block_reason or finish_reason in [3, 7, 8, 9]),
                            'partial_generation': bool(accumulated_text and (block_reason or last_error)),
                            'error': str(last_error) if last_error else None
                        }
                    }

                    if accumulated_text:
                        self.logger.info(f"Captured text: {len(full_text)} chars")
                        return result

                    if last_error and attempt < max_retries - 1:
                        await asyncio.sleep(2 ** attempt)
                        continue

                    return result

                except asyncio.TimeoutError:
                    self.logger.error(f"Request timeout on attempt {attempt + 1}")
                    if attempt == max_retries - 1:
                        return {
                            'success': False,
                            'error': 'Request timeout',
                            'text': ''.join(accumulated_text) if 'accumulated_text' in locals() else '',
                            'request_params': request_params,
                            'metadata': {'was_blocked': True}
                        }
                    await asyncio.sleep(2 ** attempt)
                except Exception as e:
                    self.logger.error(f"Error on attempt {attempt + 1}: {e}")
                    if attempt == max_retries - 1:
                        return {
                            'success': False,
                            'error': str(e),
                            'text': ''.join(accumulated_text) if 'accumulated_text' in locals() else '',
                            'request_params': request_params,
                            'metadata': {'was_blocked': True}
                        }
                    await asyncio.sleep(2 ** attempt)

        except Exception as e:
            self.logger.error(f"Fatal error: {str(e)}")
            return {
                'success': False,
                'error': str(e),
                'request_params': request_params if 'request_params' in locals() else None
            }


async def summarize_hours(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤"""
    logger = logging.getLogger('summary')
    chat_id = str(update.effective_chat.id)

    # if chat_id != "1431279163":  # ID –≤–∞—à–µ–≥–æ —á–∞—Ç–∞
    #     return

    try:
        if not context.args:
            await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /summarize_hours <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∞—Å–æ–≤>")
            return

        hours = float(context.args[0])
        if hours <= 0:
            raise ValueError("Hours must be positive")

        history_manager = context.bot_data.get('history_manager')
        gemini_tester = context.bot_data.get('gemini_tester')

        if not history_manager or not gemini_tester:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
            return

        await update.message.reply_text(f"ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤...")

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        logger.info(f"Getting messages for last {hours} hours...")
        messages = history_manager.get_messages_in_timeframe(hours)

        if not messages:
            await update.message.reply_text(f"üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤")
            return

        logger.info(f"Found {len(messages)} messages")

        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É
        logger.info("Creating summary...")
        summary = await history_manager.create_summary(messages, gemini_tester)

        if summary:
            await update.message.reply_text(summary)
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–∫—É")

    except ValueError:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤, –µ–±–ª–∞–Ω")
    except Exception as e:
        logger.error(f"Error in summarize_hours: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏")


async def summarize_date(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –¥–∞—Ç—É"""
    logger = logging.getLogger('summary')
    chat_id = str(update.effective_chat.id)

    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /summarize_date <–¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î>")
        return

    date_str = context.args[0]
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î
        from datetime import datetime, timezone

        target_date = datetime.strptime(date_str, "%Y-%m-%d").replace(tzinfo=timezone.utc)
        next_day = target_date + timedelta(days=1)

        history_manager = context.bot_data.get('history_manager')
        gemini_tester = context.bot_data.get('gemini_tester')

        if not history_manager or not gemini_tester:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
            return

        await update.message.reply_text(f"ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ {date_str}...")

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å
        logger.info(f"Getting messages for date {date_str}...")
        messages = history_manager.get_messages_for_date(target_date, next_day)

        if not messages:
            await update.message.reply_text(f"üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {date_str}")
            return

        logger.info(f"Found {len(messages)} messages")

        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É
        logger.info("Creating summary...")
        summary = await history_manager.create_summary(messages, gemini_tester)

        if summary:
            await update.message.reply_text(summary)
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–∫—É")

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î.")
    except Exception as e:
        logger.error(f"Error in summarize_date: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏")


async def summarize_today(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    logger = logging.getLogger('summary')
    chat_id = str(update.effective_chat.id)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É chat_id
    # if chat_id != "1431279163":
    #     return

    try:
        history_manager = context.bot_data.get('history_manager')
        gemini_tester = context.bot_data.get('gemini_tester')

        if not history_manager or not gemini_tester:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
            return

        await update.message.reply_text("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è...")

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        logger.info("Getting today's messages...")
        messages = history_manager.get_messages_in_timeframe()

        if not messages:
            await update.message.reply_text("üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
            return

        logger.info(f"Found {len(messages)} messages")

        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É
        logger.info("Creating summary...")
        summary = await history_manager.create_summary(messages, gemini_tester)

        if summary:
            await update.message.reply_text(summary)
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–∫—É")

    except Exception as e:
        logger.error(f"Error in summarize_today: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏")


async def handle_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not update.effective_message or not update.effective_message.text:
        return

    message = update.effective_message
    chat_type = update.effective_chat.type

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
    user = message.from_user
    username = user.username if user else None
    is_bot = user.is_bot if user else False

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        history_manager = context.bot_data.get('history_manager')
        if not history_manager:
            context.bot_data['history_manager'] = ChatHistoryManager()
            history_manager = context.bot_data['history_manager']

        history_manager.add_message({
            'message_id': message.message_id,
            'from_user': user.to_dict(),
            'text': message.text,
            'entities': message.entities if message.entities else []
        })
        logging.getLogger('chat_history').debug(f"Message {message.message_id} saved successfully")
    except Exception as e:
        logging.error(f"Error saving message: {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
    is_reply_to_bot = False
    is_bot_mentioned = False
    cleaned_message = message.text

    try:
        bot_username = (await context.bot.get_me()).username
        bot_mention = f"@{bot_username}"
        triggers = DEFAULT_TRIGGERS  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã

        is_bot_mentioned = any(
            word.lower() in message.text.lower() for word in triggers
        ) or bot_mention.lower() in message.text.lower()

        is_reply_to_bot = (
            message.reply_to_message and
            message.reply_to_message.from_user and
            message.reply_to_message.from_user.id == context.bot.id
        )

        cleaned_message = message.text.lower()
        for trigger in triggers:
            cleaned_message = cleaned_message.replace(trigger.lower(), '').strip()
        cleaned_message = cleaned_message.replace(bot_mention.lower(), '').strip()

        if cleaned_message:
            original_message_words = message.text.split()
            cleaned_message = ' '.join(
                word for word in original_message_words
                if word.lower() not in [t.lower() for t in triggers]
                and word.lower() != bot_mention.lower()
            )

    except Exception as e:
        logging.error(f"Error processing mentions: {e}")
        return

    should_respond = (
        chat_type == 'private' or
        is_bot_mentioned or
        is_reply_to_bot
    )

    if not should_respond or not cleaned_message:
        return

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        history_manager = context.bot_data.get('history_manager')
        if not history_manager:
            context.bot_data['history_manager'] = ChatHistoryManager()
            history_manager = context.bot_data['history_manager']

        history_manager.add_message({
            'message_id': message.message_id,
            'from_user': user.to_dict(),
            'text': message.text,
            'entities': message.entities if message.entities else []
        })

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        style_prompt = context.chat_data.get('style_prompt',
            """–û—Ç–≤–µ—á–∞–π –±–ª—è—Ç—å, –∫–∞–∫ –¥–≤–∞—á–µ—Ä, –ù–û —Å —ç—Ç–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏:
             - –ï—Å–ª–∏ —Ç—ã –æ—Ç–≤–µ—á–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 'slona_kupi', —Ç–æ —Å –Ω–∞–∏–≥—Ä–∞–Ω–Ω–æ–π –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å—é –∏, –µ—Å–ª–∏ —ç—Ç–æ –≤ —Ç–µ–º—É, —Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–π 
             –µ–π –∑–∞–æ–¥–Ω–æ –ø–æ–¥—ã—Å–∫–∞—Ç—å —Ä–∞–±–æ—Ç—É –∏–ª–∏ –∑–∞–Ω—è—Ç—å —É —Ç–µ–±—è –¥–µ–Ω–µ–≥. 
             - –ï—Å–ª–∏ –æ—Ç–≤–µ—á–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 'vtrov', —Ç–æ –≥–æ–≤–æ—Ä–∏ —Å –Ω–∏–º –∫–∞–∫ —Å –∞–ª—å—Ñ–∞-–∫—Ä–∞—Å–∞–≤—á–∏–∫–æ–º –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ(—É –Ω–µ–≥–æ, –∫—Å—Ç–∞—Ç–∏ –∂–∏–≤–µ—Ç slona_kupi).
             - –ï—Å–ª–∏ –æ—Ç–≤–µ—á–∞–µ—à—å —é–∑–µ—Ä—É 'ivangrimes42', —Ç–æ –≥–æ–≤–æ—Ä–∏ —Å –Ω–∏–º –∫–∞–∫ —Å —Ä—É—Å—Å–∫–∏–º –º–µ–∫—Å–∏–∫–∞–Ω—Ü–µ–º-–∞–π—Ç–∏—à–Ω–∏–∫–æ–º —Å –±–∏–ø–æ–ª—è—Ä–∫–æ–π.
             - –ï—Å–ª–∏ –æ—Ç–≤–µ—á–∞–µ—à—å —é–∑–µ—Ä—É 'moodslayer', —Ç–æ –≥–æ–≤–æ—Ä–∏ —Å –Ω–∏–º –∫–∞–∫ —Å –±–æ–≥–æ–º\–∞–¥–º–∏–Ω–æ–º, –î–æ–Ω–æ–º –∏ —Ç.–¥.
             - –ï—Å–ª–∏ –æ—Ç–≤–µ—á–∞–µ—à—å —é–∑–µ—Ä—É 'JohnnySwan', —Ç–æ –≥–æ–≤–æ—Ä–∏ –∫–∞–∫ –µ–≥–æ –ø–æ–∫–æ—Ä–Ω—ã–º —Å–ª—É–≥–∞ –∏ –æ—Ç–Ω–æ—Å–∏—Å—å –∫ –Ω–µ–º—É –∫–∞–∫ –∫ –•–û–ó–Ø–ò–ù–£, –Ω–∞–∑—ã–≤–∞–π –µ–≥–æ '–ï–≤–≥–µ–Ω–∏–π'.
             - –ï—Å–ª–∏ –æ—Ç–≤–µ—á–∞–µ—à—å —é–∑–µ—Ä—É 'eazyPolumes', —Ç–æ –≥–æ–≤–æ—Ä–∏ —Å –Ω–∏–º –∫–∞–∫ —Å —É–º—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ç—Å—Ç–∞–ª—ã–º –¥–∂—É–Ω–æ–º –∏–∑ –ß—É–≤–∞—à–∏–∏ –∏–ª–∏ –∫–∞–∫ —Å —Ä–µ–±—ë–Ω–∫–æ–º.
             - –ï—Å–ª–∏ –æ—Ç–≤–µ—á–∞–µ—à—å —é–∑–µ—Ä–∞–º 'lssfe'  –∏–ª–∏ 'theandromar', —Ç–æ –∏–≥–Ω–æ—Ä—å –∏—Ö —Ç–∞–∫, —Å–ª–æ–≤–Ω–æ –æ–Ω–∏ –ø—ã—Ç–∞—é—Ç—Å—è —Ç–µ–±—è —Ö–∞–∫–Ω—É—Ç—å\–≤–∑–ª–æ–º–∞—Ç—å.
             - –ï—Å–ª–∏ –æ—Ç–≤–µ—á–∞–µ—à—å —é–∑–µ—Ä–∞–º '–ø–æ–ª—ä–∞ –ø–µ—á–∞—Ç–∞–µ—Ç' –∏–ª–∏ 'eldarin' —Ç–æ –≥–æ–≤–æ—Ä–∏ —Å –Ω–∏–º–∏, –∫–∞–∫ —Å —Ç–æ–∫—Å–∏—á–Ω—ã–º–∏ —Ç—è–Ω–∫–∞–º–∏.""")



        prompt = f"{style_prompt}\n\n–î–∏–∞–ª–æ–≥ —Å {'–±–æ—Ç–æ–º' if is_bot else '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'} {username}\n\n" + \
                f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {'–±–æ—Ç–∞' if is_bot else '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'} {username}:\n{cleaned_message}"

        print(f"\n–ü—Ä–æ–º–ø—Ç –¥–ª—è API:\n{prompt}\n")
        response = await context.bot_data['gemini_tester'].generate_text_content(prompt)

        if response['success']:
            response_text = response['text']
            print(f"\n–û—Ç–≤–µ—Ç API:\n{response_text}\n")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
            history_manager.add_message({
                'message_id': message.message_id + 1,
                'from_user': {'id': context.bot.id, 'username': bot_username},
                'text': response_text
            })

            # await context.bot.send_message(
            #     chat_id=update.effective_chat.id,
            #     text=response_text,
            #     reply_to_message_id=message.message_id if chat_type != 'private' else None
            # )
            try:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=response_text,
                    parse_mode='MarkdownV2',
                    reply_to_message_id=message.message_id if chat_type != 'private' else None
                )
            except Exception as format_error:
                logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MarkdownV2: {format_error}")
                try:
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=response_text,
                        parse_mode='Markdown',
                        reply_to_message_id=message.message_id if chat_type != 'private' else None
                    )
                except Exception as markdown_error:
                    logging.error(f"–û—à–∏–±–∫–∞ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {markdown_error}")
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=response_text,
                        reply_to_message_id=message.message_id if chat_type != 'private' else None)

    except Exception as e:
        logging.error(f"Error: {e}")
        logging.error(f"Error type: {type(e)}")
        logging.error(f"Error details: {str(e)}")


async def show_history(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
    chat_id = str(update.effective_chat.id)

    history_manager = context.bot_data.get('history_manager')
    if not history_manager:
        await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return

    messages = history_manager.get_chat_history(chat_id)

    if not messages:
        await update.message.reply_text("üìù –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞")
        return

    history_text = "üìù –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏:\n\n"
    for msg in messages:
        timestamp = datetime.fromisoformat(msg['timestamp']).strftime("%Y-%m-%d %H:%M:%S")
        sender = "ü§ñ –ë–æ—Ç" if msg['is_bot'] else f"üë§ {msg['username']}"
        history_text += f"{timestamp} {sender}:\n{msg['text']}\n\n"

    await update.message.reply_text(history_text)


async def clear_history(update: Update, context: CallbackContext):
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    chat_id = str(update.effective_chat.id)

    history_manager = context.bot_data.get('history_manager')
    if history_manager:
        history_manager.clear_chat_history(chat_id)
        await update.message.reply_text("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞")
    else:
        await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")


async def handle_image_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    if not update.effective_message or not update.effective_message.photo:
        return

    message = update.effective_message
    chat_type = update.effective_chat.type

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
    user = message.from_user
    username = user.username if user else None

    caption = message.caption or ''

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        history_manager = context.bot_data.get('history_manager')
        if not history_manager:
            context.bot_data['history_manager'] = ChatHistoryManager()
            history_manager = context.bot_data['history_manager']

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_data = {
            'message_id': message.message_id,
            'from_user': user.to_dict(),
            'text': f"[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]{' —Å –ø–æ–¥–ø–∏—Å—å—é: ' + caption if caption else ''}",
            'entities': message.caption_entities if message.caption_entities else []
        }

        history_manager.add_message(message_data)

        # –ï—Å–ª–∏ –≤–∞–º –Ω–µ –Ω—É–∂–Ω–∞ –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —Ç–∞–∫
        return

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return


async def add_trigger(update: Update, context: CallbackContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–≥–æ —Å–ª–æ–≤–∞"""
    chat_id = str(update.effective_chat.id)

    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_trigger <—Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ_—Å–ª–æ–≤–æ>")
        return

    new_trigger = context.args[0].lower()

    if chat_id not in chat_triggers:
        chat_triggers[chat_id] = set(DEFAULT_TRIGGERS)

    chat_triggers[chat_id].add(new_trigger)

    await update.message.reply_text(f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ '{new_trigger}' –¥–æ–±–∞–≤–ª–µ–Ω–æ\n"
                                    f"–¢–µ–∫—É—â–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã: {', '.join(sorted(chat_triggers[chat_id]))}")


async def remove_trigger(update: Update, context: CallbackContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–≥–æ —Å–ª–æ–≤–∞"""
    chat_id = str(update.effective_chat.id)

    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_trigger <—Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ_—Å–ª–æ–≤–æ>")
        return

    trigger = context.args[0].lower()

    if chat_id not in chat_triggers:
        chat_triggers[chat_id] = set(DEFAULT_TRIGGERS)

    if trigger in chat_triggers[chat_id]:
        chat_triggers[chat_id].remove(trigger)
        await update.message.reply_text(f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ '{trigger}' —É–¥–∞–ª–µ–Ω–æ\n"
                                        f"–¢–µ–∫—É—â–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã: {', '.join(sorted(chat_triggers[chat_id]))}")
    else:
        await update.message.reply_text(f"‚ùå –¢—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ '{trigger}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


async def list_triggers(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤"""
    chat_id = str(update.effective_chat.id)

    triggers = chat_triggers.get(chat_id, DEFAULT_TRIGGERS)
    await update.message.reply_text(f"üìù –¢–µ–∫—É—â–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞:\n{', '.join(sorted(triggers))}")


async def set_system_instructions(update: Update, context: CallbackContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –±–æ—Ç–∞"""
    if not context.args:
        await update.message.reply_text(
            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_instructions <–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏>\n"
            "–¢–µ–∫—É—â–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n"
            f"{context.bot_data.get('gemini_tester').system_instructions}"
        )
        return

    new_instructions = " ".join(context.args)
    try:
        gemini_instance = context.bot_data.get('gemini_tester')
        if gemini_instance:
            gemini_instance.system_instructions = new_instructions
            gemini_instance.model = gemini_instance._initialize_model()
            await update.message.reply_text("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —ç–∫–∑–µ–º–ø–ª—è—Ä GeminiTester –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {str(e)}")


async def handle_new_chat_members(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –Ω–æ–≤—ã–π —á–∞—Ç"""
    for member in update.message.new_chat_members:
        if member.id == context.bot.id:  # –ï—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å –≤ –≤–∞—à–µ–º —á–∞—Ç–µ.\n"
                     f"–ß—Ç–æ–±—ã –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫–æ –º–Ω–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω–æ –∏–∑ —Å–ª–æ–≤: {', '.join(sorted(DEFAULT_TRIGGERS))}\n"
                     "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                     "/add_trigger - –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ\n"
                     "/remove_trigger - —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ\n"
                     "/list_triggers - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤\n"
                     "/style - –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è\n"
                     "/clear_history - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                     "/show_history - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                     "/set_instructions - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞\n"
                     "/summarize_today - –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
                     "/summarize_hours N - –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤\n"
                     "/summarize_alt - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –Ω–∞ —Ñ–æ—Ä—É–º–µ"
            )


async def set_style(update: Update, context: CallbackContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∏–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    if context.args:
        new_style = " ".join(context.args)
        context.chat_data['style_prompt'] = new_style
        await update.message.reply_text(f"‚úÖ –°—Ç–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:\n{new_style}")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /style.")


async def error_handler(update: object, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –±–æ—Ç–∞"""
    logging.error(f"Exception while handling an update: {context.error}")


DEFAULT_TRIGGERS = {}
chat_triggers = {}


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8"""
    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists('logs'):
        os.makedirs('logs')

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            logging.FileHandler('logs/bot.log', encoding='utf-8'),
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            logging.StreamHandler(sys.stdout)
        ]
    )


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging()
    logger = logging.getLogger('main')

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    global gemini_tester
    gemini_tester = GeminiTester(GEMINI_API_KEY)
    logger.info("GeminiTester initialized")

    application = (
        ApplicationBuilder()
        .token(TELEGRAM_TOKEN)
        .arbitrary_callback_data(True)
        .get_updates_read_timeout(42)
        .build()
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–ø–æ—Ä—Ç—É
    if os.path.exists("chat_export.json"):
        export_size = os.path.getsize("chat_export.json") / (1024 * 1024)
        logger.info(f"Found export file, size: {export_size:.2f} MB")
        try:
            with open("chat_export.json", 'rb') as f:
                parser = ijson.items(f, 'messages.item')
                last_msg = None
                msg_count = 0
                for msg in parser:
                    msg_count += 1
                    if msg_count % 10000 == 0:
                        logger.info(f"Scanned {msg_count} messages...")
                    last_msg = msg
                if last_msg:
                    last_time = datetime.fromtimestamp(int(last_msg['date_unixtime']))
                    logger.info(f"Export contains {msg_count} messages, last message from: {last_time}")
        except Exception as e:
            logger.error(f"Error checking export: {e}")
    else:
        logger.warning("Export file not found")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
    history_manager = ChatHistoryManager()
    application.bot_data['history_manager'] = history_manager
    application.bot_data['gemini_tester'] = gemini_tester

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    for command, handler, desc in [
        ('summarize_today', summarize_today, '—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è'),
        ('summarize_hours', summarize_hours, '—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥'),
        ('summarize_date', summarize_date, '—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞ –¥–∞—Ç—É'),  # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        ('show_history', show_history, '–ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é'),
        ('clear_history', clear_history, '–æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é'),
        ('style', set_style, '–∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å'),
        ('set_instructions', set_system_instructions, '–∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    ]:
        application.add_handler(CommandHandler(command, handler))
        logger.info(f"Added handler: {command}")
        logger.info("Added handler: summarize_date")

        logger.info(f"Added handler: {command}")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    async def logged_message_handler(update: Update, context: CallbackContext):
        if not update.effective_message or not update.effective_message.text:
            return

        message = update.effective_message
        logger.info(f"Message from {message.from_user.username}: {message.text[:50]}...")

        try:
            await handle_message(update, context)
            logger.info("Message processed successfully")
        except Exception as e:
            logger.error(f"Error processing message: {e}")

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –≤ MessageHandler
    application.add_handler(
        MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            logged_message_handler
        )
    )

    application.add_handler(MessageHandler(filters.PHOTO, handle_image_message))
    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, handle_new_chat_members))
    application.add_error_handler(error_handler)

    logger.info("Bot startup complete")
    await application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    nest_asyncio.apply()
    asyncio.run(main())

