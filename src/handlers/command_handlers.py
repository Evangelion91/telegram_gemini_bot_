from typing import Dict, Any, Optional
from datetime import datetime, timedelta, timezone
import logging
from telegram import Update
from telegram.ext import CallbackContext

from src.core.gemini_client import GeminiClient
from src.features.history.manager import HistoryManager
from src.features.summary.generator import SummaryGenerator, SummaryOptions
from src.config import UserStyles


class CommandHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""

    def __init__(
            self,
            history_manager: HistoryManager,
            gemini_client: GeminiClient,
            logger: Optional[logging.Logger] = None
    ):
        self.history = history_manager
        self.gemini = gemini_client
        self.summary_generator = SummaryGenerator(gemini_client)
        self.logger = logger or logging.getLogger(__name__)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        self.commands = {
            'start': self.handle_start,
            'help': self.handle_help,
            'add_trigger': self.handle_add_trigger,
            'remove_trigger': self.handle_remove_trigger,
            'list_triggers': self.handle_list_triggers,
            'style': self.handle_set_style,
            'set_instructions': self.handle_set_instructions,
            'clear_history': self.handle_clear_history,
            'show_history': self.handle_show_history,
            'summarize_today': self.handle_summarize_today,
            'summarize_hours': self.handle_summarize_hours,
            'summarize_date': self.handle_summarize_date
        }

    async def handle_start(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        triggers = context.chat_data.get('triggers', set())
        welcome_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —á–∞—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Gemini AI.\n\n"
            f"–ß—Ç–æ–±—ã –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫–æ –º–Ω–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω–æ –∏–∑ —Å–ª–æ–≤: {', '.join(sorted(triggers))}\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/add_trigger - –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ\n"
            "/remove_trigger - —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ\n"
            "/list_triggers - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤\n"
            "/style - –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è\n"
            "/clear_history - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "/show_history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n"
            "/summarize_today - —Å–≤–æ–¥–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "/summarize_hours N - —Å–≤–æ–¥–∫–∞ –∑–∞ N —á–∞—Å–æ–≤\n"
            "/summarize_date YYYY-MM-DD - —Å–≤–æ–¥–∫–∞ –∑–∞ –¥–∞—Ç—É\n"
            "/set_instructions - –∏–∑–º–µ–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
        )
        await update.message.reply_text(welcome_text)

    async def handle_help(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
            "1. –û–±—â–µ–Ω–∏–µ:\n"
            "- –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–º —Å–ª–æ–≤–∞–º –∏–ª–∏ –≤ –ª–∏—á–∫–µ\n"
            "- –ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã\n"
            "- –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏\n\n"
            "2. –°—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è:\n"
            "- /style - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∏–ª—è\n"
            "- –î–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–≤–æ–π —Å—Ç–∏–ª—å\n\n"
            "3. –ò—Å—Ç–æ—Ä–∏—è –∏ –∞–Ω–∞–ª–∏–∑:\n"
            "- /show_history - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏\n"
            "- /summarize_today - —Å–≤–æ–¥–∫–∞ –∑–∞ –¥–µ–Ω—å\n"
            "- /summarize_hours N - —Å–≤–æ–¥–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥\n"
            "- /summarize_date YYYY-MM-DD - —Å–≤–æ–¥–∫–∞ –∑–∞ –¥–∞—Ç—É\n\n"
            "4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞:\n"
            "- /add_trigger - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞\n"
            "- /remove_trigger - —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞\n"
            "- /set_instructions - —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
        )
        await update.message.reply_text(help_text)

    async def handle_add_trigger(self, update: Update, context: CallbackContext) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–≥–æ —Å–ª–æ–≤–∞"""
        if not context.args:
            await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_trigger <—Å–ª–æ–≤–æ>")
            return

        chat_id = str(update.effective_chat.id)
        trigger = context.args[0].lower()

        if 'triggers' not in context.chat_data:
            context.chat_data['triggers'] = set()

        context.chat_data['triggers'].add(trigger)

        await update.message.reply_text(
            f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä '{trigger}' –¥–æ–±–∞–≤–ª–µ–Ω\n"
            f"–¢–µ–∫—É—â–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã: {', '.join(sorted(context.chat_data['triggers']))}"
        )

    async def handle_remove_trigger(self, update: Update, context: CallbackContext) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–≥–æ —Å–ª–æ–≤–∞"""
        if not context.args:
            await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_trigger <—Å–ª–æ–≤–æ>")
            return

        chat_id = str(update.effective_chat.id)
        trigger = context.args[0].lower()

        if 'triggers' in context.chat_data and trigger in context.chat_data['triggers']:
            context.chat_data['triggers'].remove(trigger)
            await update.message.reply_text(
                f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä '{trigger}' —É–¥–∞–ª–µ–Ω\n"
                f"–¢–µ–∫—É—â–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã: {', '.join(sorted(context.chat_data['triggers']))}"
            )
        else:
            await update.message.reply_text(f"‚ùå –¢—Ä–∏–≥–≥–µ—Ä '{trigger}' –Ω–µ –Ω–∞–π–¥–µ–Ω")

    async def handle_list_triggers(self, update: Update, context: CallbackContext) -> None:
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        triggers = context.chat_data.get('triggers', set())
        await update.message.reply_text(
            f"üìù –¢–µ–∫—É—â–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã:\n{', '.join(sorted(triggers))}"
        )

    async def handle_set_style(self, update: Update, context: CallbackContext) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è"""
        if not context.args:
            current_style = context.chat_data.get('style_prompt', '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–∏–ª—å')
            await update.message.reply_text(
                "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /style <–æ–ø–∏—Å–∞–Ω–∏–µ_—Å—Ç–∏–ª—è>\n"
                f"–¢–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å: {current_style}"
            )
            return

        new_style = " ".join(context.args)
        context.chat_data['style_prompt'] = new_style
        await update.message.reply_text(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å:\n{new_style}")

    async def handle_set_instructions(self, update: Update, context: CallbackContext) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"""
        if not context.args:
            current_instructions = self.gemini.system_instructions
            await update.message.reply_text(
                "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_instructions <–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏>\n"
                f"–¢–µ–∫—É—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n{current_instructions}"
            )
            return

        new_instructions = " ".join(context.args)
        self.gemini.update_system_instructions(new_instructions)
        await update.message.reply_text("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    async def handle_clear_history(self, update: Update, context: CallbackContext) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
        chat_id = str(update.effective_chat.id)
        self.history.clear_chat_history(chat_id)
        await update.message.reply_text("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞")

    async def handle_show_history(self, update: Update, context: CallbackContext) -> None:
        """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        chat_id = str(update.effective_chat.id)
        messages = self.history.get_messages(chat_id, limit=10)

        if not messages:
            await update.message.reply_text("üìù –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞")
            return

        history_text = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
        for msg in messages:
            time = datetime.fromtimestamp(int(msg['date_unixtime'])).strftime("%H:%M:%S")
            sender = msg['from_user']
            text = msg['text']
            history_text += f"{time} {sender}:\n{text}\n\n"

        await update.message.reply_text(history_text)

    async def handle_summarize_today(self, update: Update, context: CallbackContext) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        chat_id = str(update.effective_chat.id)

        await update.message.reply_text("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è...")

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now(timezone.utc).replace(
            hour=0, minute=0, second=0, microsecond=0
        )
        messages = self.history.get_messages(
            chat_id=chat_id,
            start_time=today
        )

        if not messages:
            await update.message.reply_text("üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username = update.effective_user.username
        user_style = UserStyles.get_style(username)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
        summary = await self.summary_generator.generate_daily_summary(
            messages=messages,
            style=user_style
        )

        await update.message.reply_text(summary)

    async def handle_summarize_hours(self, update: Update, context: CallbackContext) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤"""
        if not context.args:
            await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /summarize_hours <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∞—Å–æ–≤>")
            return

        try:
            hours = float(context.args[0])
            if hours <= 0:
                raise ValueError("Hours must be positive")

            chat_id = str(update.effective_chat.id)
            await update.message.reply_text(f"ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤...")

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            end_time = datetime.now(timezone.utc)
            start_time = end_time - timedelta(hours=hours)
            messages = self.history.get_messages(
                chat_id=chat_id,
                start_time=start_time,
                end_time=end_time
            )

            if not messages:
                await update.message.reply_text(f"üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username = update.effective_user.username
            user_style = UserStyles.get_style(username)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
            summary = await self.summary_generator.generate_period_summary(
                messages=messages,
                hours=hours,
                style=user_style
            )

            await update.message.reply_text(summary)

        except ValueError:
            await update.message.reply_text("‚ùå –£–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤")
        except Exception as e:
            self.logger.error(f"Error in summarize_hours: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏")

    async def handle_summarize_date(self, update: Update, context: CallbackContext) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
        if not context.args:
            await update.message.reply_text(
                "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /summarize_date YYYY-MM-DD"
            )
            return

        try:
            target_date = datetime.strptime(
                context.args[0], "%Y-%m-%d"
            ).replace(tzinfo=timezone.utc)
            next_date = target_date + timedelta(days=1)

            chat_id = str(update.effective_chat.id)
            await update.message.reply_text(f"ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ {context.args[0]}...")

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = self.history.get_messages(
                chat_id=chat_id,
                start_time=target_date,
                end_time=next_date
            )

            if not messages:
                await update.message.reply_text(f"üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {context.args[0]}")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username = update.effective_user.username
            user_style = UserStyles.get_style(username)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
            summary = await self.summary_generator.generate_date_summary(
                messages=messages,
                target_date=target_date,
                style=user_style
            )

            await update.message.reply_text(summary)

        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")
        except Exception as e:
            self.logger.error(f"Error in summarize_date: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏")